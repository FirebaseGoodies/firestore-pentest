import { AbstractControl, ValidationErrors } from '@angular/forms';
import { DatabaseConfig } from '../models/database-config.model';

export function databaseConfigValidator(control: AbstractControl): ValidationErrors | null {
  let isValid = false;
  try {
    if (control.value) {
      const sanitizedJson = control.value.replace(/(["':\w]+)(:)/g, (match, $1, $2) => {
        //console.log($1);
        if ($1.match(/^["']/g)) {
          return $1 + $2;
        } else {
          const colonIndex = $1.indexOf(':');
          return colonIndex === -1 ? `"${$1}":` : `"${$1.slice(0, colonIndex)}":${$1.slice(colonIndex+1)}`;
        }
      }).replace(/'/g, '"');
      //console.log(sanitizedJson);
      const config: DatabaseConfig = JSON.parse(sanitizedJson);
      //console.log(config);
      isValid = this.isDatabaseConfigValid(config);
    }
  } catch (e) {
    //console.error(e.message);
  }

  return isValid ? null : { configInvalid: true };
}

export function isDatabaseConfigValid(config: DatabaseConfig): boolean {
  return !!(config.apiKey && config.authDomain && config.databaseURL && config.projectId && config.storageBucket && config.messagingSenderId && config.appId);
}

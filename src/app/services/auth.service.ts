import { Injectable } from '@angular/core';
import { AngularFireAuth } from '@angular/fire/auth';
import { Authentication, AuthenticationType } from '../models/auth.model';
import * as firebase from 'firebase/app';
import 'firebase/auth'; // required when importing firebase from 'firebase/app'
import { DebugService } from './debug.service';

@Injectable({
  providedIn: 'root'
})
export class AuthService {

  currentUser: firebase.default.User = null;
  lastError: firebase.default.FirebaseError = null;

  constructor(
    private auth: AngularFireAuth,
    private debugService: DebugService
  ) {
    this.auth.onAuthStateChanged((user) => {
      // this.debugService.log(user);
      this.currentUser = user;
    });
  }

  isSignedIn(): boolean {
    return !!this.currentUser;
  }

  signIn(authentication: Authentication): Promise<void> {
    this.debugService.log('sign in', authentication);
    return new Promise((resolve, reject) => {
      if (this.isSignedIn()) {
        this.debugService.log('already signed in!');
        resolve();
      } else {
        // Set authentication function
        let signInFunction: Function = null;
        switch(authentication.type) {
          case AuthenticationType.Anonymous:
            signInFunction = () => this.auth.signInAnonymously();
            break;
          case AuthenticationType.EmailAndPassword:
            if (authentication.credentials.email?.length && authentication.credentials.password?.length) {
              signInFunction = () => this.auth.signInWithEmailAndPassword(authentication.credentials.email, authentication.credentials.password);
            }
            break;
          case AuthenticationType.JWT:
            if (authentication.credentials.token?.length) {
              signInFunction = () => this.auth.signInWithCustomToken(authentication.credentials.token);
            }
            break;
        }
        // Sign in
        if (signInFunction !== null) {
          this.auth.setPersistence(firebase.default.auth.Auth.Persistence.NONE).then(() => {
            signInFunction().then(() => {
              resolve();
            }).catch((error: firebase.default.FirebaseError) => {
              this.setLastError(error);
              reject(error);
            });
          }).catch((error: firebase.default.FirebaseError) => {
            this.setLastError(error);
            reject(error);
          });
        } else {
          reject({
            message: 'Unknown authentication type'
          });
        }
      }
    });
  }

  signOut(force: boolean = false): void {
    this.debugService.log('sign out', this.isSignedIn());
    if (force || this.isSignedIn()) {
      this.auth.signOut().catch((error: firebase.default.FirebaseError) => {
        this.setLastError(error);
      });
    }
  }

  private setLastError(error: firebase.default.FirebaseError) {
    this.lastError = error;
    // console.error(`[${error.code}] ${error.message}`);
  }

}

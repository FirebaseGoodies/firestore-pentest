import { Component, OnInit, OnDestroy } from '@angular/core';
import { DatabaseConfigSample } from 'src/app/models/database-config.model';
import { Setup } from 'src/app/models/setup.model';
import { SetupService } from 'src/app/services/setup.service';
import { databaseConfigValidator, parseDatabaseConfig } from 'src/app/validators/database-config.validator';
import { stringify } from 'src/app/helpers/parser.helper';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { DebugService } from 'src/app/services/debug.service';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { markFormGroupAsDirty } from 'src/app/helpers/form.helper';

@Component({
  selector: 'app-setup',
  templateUrl: './setup.component.html',
  styleUrls: ['./setup.component.scss']
})
export class SetupComponent implements OnInit, OnDestroy {

  setupForm: FormGroup;
  readonly databaseConfigSample: string = DatabaseConfigSample;
  isPasswordVisible: boolean = false;
  disableStartButton: boolean = false;
  private componentDestroy: Subject<void> = new Subject();

  constructor(
    private setupService: SetupService,
    private debugService: DebugService,
    private formBuilder: FormBuilder
  ) { }

  ngOnInit(): void {
    // Fetch setup
    let setup: Setup = new Setup();
    const cache: Setup = this.setupService.get();
    if (cache) {
      setup = {...setup, ...cache}; // merge
      if (setup.databaseConfig) {
        setup.databaseConfig = stringify(setup.databaseConfig as any) as any;
      }
    }
    this.debugService.log('setup:', setup);
    // Setup form validation rules
    this.setupForm = this.formBuilder.group({
      databaseConfig: [setup.databaseConfig, [Validators.required, databaseConfigValidator]],
      authentication: this.formBuilder.group({
        anonymous: this.formBuilder.group({
          enabled: [setup.authentication.anonymous.enabled, null],
        }),
        emailAndPassword: this.formBuilder.group({
          enabled: [setup.authentication.emailAndPassword.enabled, null],
          credentials: this.formBuilder.group({
            email: [setup.authentication.emailAndPassword.credentials.email, [Validators.email, Validators.required]],
            password: [setup.authentication.emailAndPassword.credentials.password, [Validators.required]],
          })
        }),
        jwt: this.formBuilder.group({
          enabled: [setup.authentication.jwt.enabled, null],
          credentials: this.formBuilder.group({
            token: [setup.authentication.jwt.credentials.token, [Validators.required]],
          })
        }),
      }),
      miscellaneous: this.formBuilder.group({
        collections: [setup.miscellaneous.collections, [Validators.required]],
        clearTestData: [setup.miscellaneous.clearTestData, null],
      })
    });
    // Update rules depending on checked options
    this.setupForm.get('authentication.emailAndPassword.enabled').valueChanges.pipe(
      takeUntil(this.componentDestroy)
    ).subscribe((enabled: boolean) => {
      if (enabled) {
        this.setupForm.get('authentication.emailAndPassword.credentials.email').setValidators([Validators.email, Validators.required]);
        this.setupForm.get('authentication.emailAndPassword.credentials.password').setValidators([Validators.required]);
      } else {
        this.setupForm.get('authentication.emailAndPassword.credentials.email').setValidators(null);
        this.setupForm.get('authentication.emailAndPassword.credentials.password').setValidators(null);
      }
    });
    this.setupForm.get('authentication.jwt.enabled').valueChanges.pipe(
      takeUntil(this.componentDestroy)
    ).subscribe((enabled: boolean) => {
      if (enabled) {
        this.setupForm.get('authentication.jwt.credentials.token').setValidators([Validators.required]);
      } else {
        this.setupForm.get('authentication.jwt.credentials.token').setValidators(null);
      }
    });
  }

  ngOnDestroy(): void {
    this.componentDestroy.next();
    this.componentDestroy.complete();
  }

  submitForm(): void {
    markFormGroupAsDirty(this.setupForm);
    this.debugService.log('is setupForm valid:', this.setupForm.valid, this.setupForm.value);
    if (this.setupForm.valid) {
      this.disableStartButton = true;
      const setup = this.setupForm.value;
      // Parse database config
      setup.databaseConfig = parseDatabaseConfig(setup.databaseConfig as any);
      // Save setup
      this.setupService.save(setup);
      // Start
      window.open('./scan', '_self');
    }
  }

}

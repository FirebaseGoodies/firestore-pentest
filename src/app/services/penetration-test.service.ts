import { Injectable } from '@angular/core';
import { PenetrationTest, PenetrationTestResults } from '../models/penetration-test.model';
import { AngularFirestore } from '@angular/fire/firestore';
import { SetupService } from './setup.service';
import { Setup } from '../models/setup.model';
import { AuthService } from './auth.service';
import { DebugService } from './debug.service';

@Injectable({
  providedIn: 'root'
})
export class PenetrationTestService {

  private setup: Setup;
  tests: PenetrationTest[];

  constructor(
    private setupService: SetupService,
    private authService: AuthService,
    private debugService: DebugService,
    private db: AngularFirestore
  ) {
    this.setup = this.setupService.get();
    this.tests = [
      // Read test
      {
        description: 'Read test (without authentication)',
        run: new Promise((resolve, reject) => {
          const results: PenetrationTestResults = { success: false, details: {} };
          const promises: Promise<any>[] = [];
          this.setup.miscellaneous.collections.forEach((collection: string) => {
            const promise = this.db.collection(collection).get().toPromise().then(() => {
              results.details[collection] = true;
              results.success = true;
            }).catch((error: Error) => {
              this.debugService.log(error.message);
              results.details[collection] = false;
            });
            promises.push(promise);
          });
          Promise.all(promises).finally(() => {
            resolve(results);
          });
        })
      },
      // Write test
      {
        description: 'Write test (without authentication)',
        run: new Promise((resolve, reject) => {
          const results: PenetrationTestResults = { success: false, details: {} };
          const promises: Promise<any>[] = [];
          this.setup.miscellaneous.collections.forEach((collection: string) => {
            const promise = this.db.collection(collection).add({}).then(() => {
              results.details[collection] = true;
              results.success = true;
            }).catch((error: Error) => {
              this.debugService.log(error.message);
              results.details[collection] = false;
            });
            promises.push(promise);
          });
          Promise.all(promises).finally(() => {
            resolve(results);
          });
        })
      }
    ]; 
  }

}
